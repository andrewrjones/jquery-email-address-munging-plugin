<!DOCTYPE HTML>
<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<title>Email Adress Munging Tests</title>

<!-- YUI Test stuff -->
<link type="text/css" rel="stylesheet" href="http://yui.yahooapis.com/3.2.0/build/cssfonts/fonts-min.css" />
<script type="text/javascript" src="http://yui.yahooapis.com/3.2.0/build/yui/yui-min.js"></script>
<script src='../ext/yuitest/javascript/build/yuitest/yuitest-min.js' type='text/javascript'></script>
<style type="text/css">
.yui3-skin-sam .yui3-console-entry-pass .yui3-console-entry-cat {
    background-color: green;
    color: #fff;
}

.yui3-skin-sam .yui3-console-entry-fail .yui3-console-entry-cat {
    background-color: red;
    color: #fff;
}

.yui3-skin-sam .yui3-console-entry-ignore .yui3-console-entry-cat {
    background-color: #666;
}
</style>


<!-- jQuery stuff -->
<script src='http://code.jquery.com/jquery-1.4.4.js' type='text/javascript'></script>
<script src='../src/jquery.emailaddressmunging.js' type='text/javascript'></script>
<body class="yui3-skin-sam  yui-skin-sam">

<div id="testLogger"></div>
<script type="text/javascript">
YUI().use("console", function (Y) {

    var unitTestCase = new YUITest.TestCase({
    
        //name of the test case - if not provided, one is auto-generated
        name : "Unit Tests",
        
        "should do andrew (at) arjones.co.uk": function(){
            var Assert = YUITest.Assert;
            
            Assert.areEqual($.fn.emailAddressMunging._createEmail("andrew (at) arjones.co.uk"), "andrew@arjones.co.uk" );
        },
        
        "should do andrew [at] arjones.co.uk": function(){
            var Assert = YUITest.Assert;
            
            Assert.areEqual($.fn.emailAddressMunging._createEmail("andrew [at] arjones.co.uk"), "andrew@arjones.co.uk" );
        },
        
        "should do andrew@arjones (dot) com": function(){
            var Assert = YUITest.Assert;
            
            Assert.areEqual($.fn.emailAddressMunging._createEmail("andrew@arjones (dot) com"), "andrew@arjones.com" );
        },
        
        "should do andrew@arjones [dot] com": function(){
            var Assert = YUITest.Assert;
            
            Assert.areEqual($.fn.emailAddressMunging._createEmail("andrew@arjones [dot] com"), "andrew@arjones.com" );
        },
        
        "should do andrew@arjones (dot) co (dot) uk": function(){
            var Assert = YUITest.Assert;
            
            Assert.areEqual($.fn.emailAddressMunging._createEmail("andrew@arjones (dot) co (dot) uk"), "andrew@arjones.co.uk" );
        },
        
        "should do andrew@arjones [dot] co [dot] uk": function(){
            var Assert = YUITest.Assert;
            
            Assert.areEqual($.fn.emailAddressMunging._createEmail("andrew@arjones [dot] co [dot] uk"), "andrew@arjones.co.uk" );
        },
        
        "should do andrew [at] arjones [dot] co [dot] uk": function(){
            var Assert = YUITest.Assert;
            
            Assert.areEqual($.fn.emailAddressMunging._createEmail("andrew [at] arjones [dot] co [dot] uk"), "andrew@arjones.co.uk" );
        },
        
        "should do andrew [AT] arjones [DOT] co [DOT] uk": function(){
            var Assert = YUITest.Assert;
            
            Assert.areEqual($.fn.emailAddressMunging._createEmail("andrew [AT] arjones [DOT] co [DOT] uk"), "andrew@arjones.co.uk" );
        }
    
    });
    
    var functionalTestCase = new YUITest.TestCase({
    
        name : "Functional Tests",
        
        setUp : function () {
            // container element to run tests
            $('<div id="tests"></div>').appendTo("body");
        },
        
        tearDown : function () {
            // remove test elements
            $('#tests').remove();
        },
        
        "should create <a> element with correct href and all existing attributes" : function () {
            var Assert = YUITest.Assert;
            
            // create an element to test and run plugin
            $('<a id="test1" class="email tests" title="my email">andrew (at) arjones.co.uk</a>').appendTo("#tests").emailAddressMunging();
            
            // get the new element
            var el = $('#test1');
            
            // tests
            Assert.areEqual(el.attr('href'), 'mailto:andrew@arjones.co.uk');
            Assert.areEqual(el.attr('title'), 'my email');
            Assert.isTrue(el.hasClass('email'));
            Assert.isTrue(el.hasClass('tests'));
            Assert.areEqual(el.text(), 'andrew@arjones.co.uk');
        },
        
        "should not overwrite href" : function () {
            var Assert = YUITest.Assert;
            
            // create an element to test and run plugin
            $('<a id="test1" href="foo">andrew (at) arjones.co.uk</a>').appendTo("#tests").emailAddressMunging();
            
            // get the new element
            var el = $('#test1');
            
            // tests
            Assert.areEqual(el.attr('href'), 'mailto:andrew@arjones.co.uk');
            Assert.areEqual(el.text(), 'andrew@arjones.co.uk');
        }
    
    });    

    var suite = new YUITest.TestSuite("Test Suite");
    suite.add(unitTestCase);
    suite.add(functionalTestCase);

    //create the console
    var r = new Y.Console({
        newestOnTop : false
    });
    
    r.render('#testLogger');
    
    var TestRunner = YUITest.TestRunner;
    
    TestRunner.add(suite);
    
    
    //function to handle events generated by the testrunner
    function logEvent(event){
        
        //data variables
        var message = "",
            messageType = "";
        
        switch(event.type){
            case TestRunner.BEGIN_EVENT:
                message = "Testing began at " + (new Date()).toString() + ".";
                messageType = "info";
                break;
                
            case TestRunner.COMPLETE_EVENT:
                message = Y.substitute("Testing completed at " +
                    (new Date()).toString() + ".\n" +
                    "Passed:{passed} Failed:{failed} " +
                    "Total:{total} ({ignored} ignored)",
                    event.results);
                messageType = "info";
                break;
                
            case TestRunner.TEST_FAIL_EVENT:
                message = event.testName + ": failed.\n" + event.error.getMessage();
                messageType = "fail";
                break;
                
            case TestRunner.TEST_IGNORE_EVENT:
                message = event.testName + ": ignored.";
                messageType = "ignore";
                break;
                
            case TestRunner.TEST_PASS_EVENT:
                message = event.testName + ": passed.";
                messageType = "pass";
                break;
                
            case TestRunner.TEST_SUITE_BEGIN_EVENT:
                message = "Test suite \"" + event.testSuite.name + "\" started.";
                messageType = "info";
                break;
                
            case TestRunner.TEST_SUITE_COMPLETE_EVENT:
                message = Y.substitute("Test suite \"" +
                    event.testSuite.name + "\" completed" + ".\n" +
                    "Passed:{passed} Failed:{failed} " +
                    "Total:{total} ({ignored} ignored)",
                    event.results);
                messageType = "info";
                break;
                
            case TestRunner.TEST_CASE_BEGIN_EVENT:
                message = "Test case \"" + event.testCase.name + "\" started.";
                messageType = "info";
                break;
                
            case TestRunner.TEST_CASE_COMPLETE_EVENT:
                message = Y.substitute("Test case \"" +
                    event.testCase.name + "\" completed.\n" +
                    "Passed:{passed} Failed:{failed} " +
                    "Total:{total} ({ignored} ignored)",
                    event.results);
                messageType = "info";
                break;
            default:
                message = "Unexpected event " + event.type;
                messageType = "info";
        }
    
        //only log if required
        Y.log(message, messageType, "TestRunner");
    }
    
    //listen for events to publish to the logger
    TestRunner.attach(TestRunner.BEGIN_EVENT, logEvent);
    TestRunner.attach(TestRunner.COMPLETE_EVENT, logEvent);
    TestRunner.attach(TestRunner.TEST_CASE_BEGIN_EVENT, logEvent);
    TestRunner.attach(TestRunner.TEST_CASE_COMPLETE_EVENT, logEvent);
    TestRunner.attach(TestRunner.TEST_SUITE_BEGIN_EVENT, logEvent);
    TestRunner.attach(TestRunner.TEST_SUITE_COMPLETE_EVENT, logEvent);
    TestRunner.attach(TestRunner.TEST_PASS_EVENT, logEvent);
    TestRunner.attach(TestRunner.TEST_FAIL_EVENT, logEvent);
    TestRunner.attach(TestRunner.TEST_IGNORE_EVENT, logEvent);
    

    //run the tests
    TestRunner.run();

});
</script>

</body>
</html>
